import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from PIL import Image

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
STAGES = [
    "1. –°—Ç–∞—Ç—É—Å –∑–µ–º–µ–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞ –§–û–¢–û",
    "2. –ì–ó —Ñ–æ—Ç–æ",
    "3. –ê–ì–ó —Ñ–æ—Ç–æ",
    "4. –ò–¢–£ —Ñ–æ—Ç–æ",
    "5. üìÑ –í—ã–ø–∏—Å–∫–∞ –∏–∑ –ï–ì–†–ü–ù–ò",
    "6. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –≥–æ—Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –§–û–¢–û",
    "7. –õ–∏—Ü–µ–Ω–∑–∏—è –§–û–¢–û",
    "8. –ù–∞–ª–æ–≥–∏ –§–û–¢–û"
]
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
CHOOSING_ACTION, UPLOADING_FILES = range(2)

# --- –§–£–ù–ö–¶–ò–ò ---

async def post_init(application: Application):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    commands = [
        BotCommand("start", "üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Å–±–æ—Ä"),
        BotCommand("done", "‚úÖ –°–æ–∑–¥–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π PDF"),
        BotCommand("cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–±–æ—Ä"),
    ]
    await application.bot.set_my_commands(commands)

def generate_action_keyboard(stage_index: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —ç—Ç–∞–ø–µ."""
    keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç", callback_data='add_photo')]]
    nav_row = []
    if stage_index > 0:
        nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='previous_stage'))
    if stage_index < len(STAGES) - 1:
        nav_row.append(InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è", callback_data='skip_stage'))
    else:
        # –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —ç—Ç–∞–ø–µ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
        nav_row.append(InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data='finish'))
    
    if nav_row:
        keyboard.append(nav_row)
        
    return InlineKeyboardMarkup(keyboard)

async def send_stage_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞."""
    stage_index = context.user_data.get('stage_index', 0)
    stage_name = STAGES[stage_index]
    reply_markup = generate_action_keyboard(stage_index)
    
    message_text = f"‚û°Ô∏è **{stage_name}**\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if update.callback_query:
        await update.callback_query.edit_message_text(text=message_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –Ω–∞—á–∞–ª —Å–±–æ—Ä.")
    context.user_data.clear()
    context.user_data['photos'] = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø–æ —ç—Ç–∞–ø–∞–º
    context.user_data['stage_index'] = 0
    await send_stage_prompt(update, context)
    return CHOOSING_ACTION

async def choosing_action_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–ù–∞–∑–∞–¥', '–ó–∞–≤–µ—Ä—à–∏—Ç—å'."""
    query = update.callback_query
    await query.answer()
    
    action = query.data
    stage_index = context.user_data.get('stage_index', 0)

    if action == 'add_photo':
        await query.edit_message_text(text="–•–æ—Ä–æ—à–æ, –∂–¥—É –≤–∞—à–∏ —Ñ–∞–π–ª—ã...")
        return UPLOADING_FILES
    
    if action == 'previous_stage':
        stage_index -= 1
    elif action == 'skip_stage':
        stage_index += 1
    
    context.user_data['stage_index'] = stage_index
    
    if action == 'finish':
        return await done(query, context)

    await send_stage_prompt(update, context)
    return CHOOSING_ACTION

async def uploading_files_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    file_to_save = update.message.photo[-1] if update.message.photo else update.message.document
    photo_file = await file_to_save.get_file()

    if not os.path.exists('temp_photos'): os.makedirs('temp_photos')
    
    file_path = os.path.join('temp_photos', photo_file.file_unique_id)
    await photo_file.download_to_drive(file_path)

    stage_index = context.user_data['stage_index']
    if stage_index not in context.user_data['photos']:
        context.user_data['photos'][stage_index] = []
    context.user_data['photos'][stage_index].append(file_path)

    total_photos = sum(len(v) for v in context.user_data['photos'].values())
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ", callback_data='add_more')],
        [InlineKeyboardButton("–ò–¥–µ–º –¥–∞–ª—å—à–µ ‚û°Ô∏è", callback_data='next_stage_after_add')],
    ]
    await update.message.reply_text(
        f"‚úÖ –§–∞–π–ª –ø—Ä–∏–Ω—è—Ç! –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {total_photos} —à—Ç.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return UPLOADING_FILES

async def after_upload_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ' –∏ '–ò–¥–µ–º –¥–∞–ª—å—à–µ'."""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'add_more':
        await query.edit_message_text(text="–•–æ—Ä–æ—à–æ, –∂–¥—É —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª...")
        return UPLOADING_FILES
    
    elif query.data == 'next_stage_after_add':
        context.user_data['stage_index'] += 1
        await send_stage_prompt(update, context)
        return CHOOSING_ACTION

async def done(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF."""
    user = update_or_query.from_user
    photos_dict = context.user_data.get('photos', {})
    
    all_photos = []
    for stage_idx in sorted(photos_dict.keys()):
        all_photos.extend(photos_dict[stage_idx])
        
    if not all_photos:
        # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç ...
        return ConversationHandler.END

    message = update_or_query.message if hasattr(update_or_query, 'message') else update_or_query
    await message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ! –°–æ–±–∏—Ä–∞—é PDF –∏–∑ {len(all_photos)} —Ñ–∞–π–ª–æ–≤...")
    # ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF ...
    # (–∫–æ–¥ –Ω–∏–∂–µ –∏–¥–µ–Ω—Ç–∏—á–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É, –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)
    pdf_path = os.path.join('temp_photos', f'{user.id}_final_document.pdf')
    try:
        image_list = [Image.open(p).convert("RGB") for p in all_photos]
        if image_list:
            image_list[0].save(pdf_path, "PDF", resolution=100.0, save_all=True, append_images=image_list[1:])
            with open(pdf_path, 'rb') as doc:
                await context.bot.send_document(chat_id=message.chat_id, document=doc)
            reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Å–±–æ—Ä", callback_data='start_over')]])
            await message.reply_text("–í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")
        await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        if os.path.exists(pdf_path): os.remove(pdf_path)
        for file_path in all_photos:
            if os.path.exists(file_path): os.remove(file_path)
        context.user_data.clear()
        
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –õ–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã
    return ConversationHandler.END

def main() -> None:
    TOKEN = "5273935935:AAHwrmEiQcN1wtfft57OjSMTJGCZSzKJASQ"
    application = Application.builder().token(TOKEN).post_init(post_init).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_ACTION: [
                CallbackQueryHandler(choosing_action_handler, pattern='^(add_photo|previous_stage|skip_stage|finish)$'),
            ],
            UPLOADING_FILES: [
                MessageHandler(filters.PHOTO | filters.Document.IMAGE, uploading_files_handler),
                CallbackQueryHandler(after_upload_handler, pattern='^(add_more|next_stage_after_add)$'),
            ]
        },
        fallbacks=[
            CommandHandler('done', lambda u, c: done(u, c)),
            CommandHandler('cancel', cancel),
            CommandHandler('start', start),
            CallbackQueryHandler(lambda u,c: start(u.callback_query, c), pattern='^start_over$')
        ],
        allow_reentry=True,
    )
    application.add_handler(conv_handler)
    print("–ë–æ—Ç '–£–º–Ω—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç' –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()